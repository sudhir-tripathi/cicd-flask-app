AWSTemplateFormatVersion: "2010-09-09"
Description: "ECS Fargate App Stack: Deploys the Flask app in ECS Fargate using resources from the Network Stack"

Parameters:
  Project:
    Type: String
    Default: Mane
  Environment:
    Type: String
    Default: Dev
  Owner:
    Type: String
    Default: Sachin
  Region:
    Type: String
    Description: "AWS Region where the resources will be deployed"
    Default: ap-south-1
    AllowedValues:
      - ap-south-1
      - us-east-1
      - us-west-1
      - eu-west-1
    ConstraintDescription: "Please select a valid AWS region"

Resources:
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub "${Project}-${Environment}-ECSCluster"
      Tags:
        - Key: Project
          Value: !Ref Project
        - Key: Environment
          Value: !Ref Environment
        - Key: Owner
          Value: !Ref Owner

  TaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${Project}-${Environment}-AppTaskExecutionRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Tags:
        - Key: Project
          Value: !Ref Project
        - Key: Environment
          Value: !Ref Environment
        - Key: Owner
          Value: !Ref Owner

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/ecs/${Project}-${Environment}-App"
      RetentionInDays: 7
      Tags:
        - Key: Project
          Value: !Ref Project
        - Key: Environment
          Value: !Ref Environment
        - Key: Owner
          Value: !Ref Owner

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub "${Project}-${Environment}-AppTaskDef"
      RequiresCompatibilities: [ FARGATE ]
      Cpu: '256'
      Memory: '512'
      NetworkMode: awsvpc
      ExecutionRoleArn: !GetAtt TaskExecutionRole.Arn
      ContainerDefinitions:
        - Name: !Sub "${Project}-${Environment}-Container"
          Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${Project}-${Environment}-ecr-repo:latest"
          PortMappings:
            - ContainerPort: 5000
              Protocol: tcp
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs

  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${Project}-${Environment}-ALBSG"
      GroupDescription: "Allow HTTP from Internet to ALB"
      VpcId: !ImportValue
        Fn::Sub: "${Project}-${Environment}-VPCId"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Project
          Value: !Ref Project
        - Key: Environment
          Value: !Ref Environment
        - Key: Owner
          Value: !Ref Owner

  AppSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${Project}-${Environment}-AppSG"
      GroupDescription: "Allow inbound traffic from ALB"
      VpcId: !ImportValue
        Fn::Sub: "${Project}-${Environment}-VPCId"
      SecurityGroupIngress:
        - Description: "Allow traffic from ALB"
          IpProtocol: tcp
          FromPort: 5000
          ToPort: 5000
          SourceSecurityGroupId: !GetAtt ALBSecurityGroup.GroupId
      Tags:
        - Key: Project
          Value: !Ref Project
        - Key: Environment
          Value: !Ref Environment
        - Key: Owner
          Value: !Ref Owner

  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub "${Project}-${Environment}-ALB"
      Scheme: internet-facing
      Subnets:
        - !ImportValue
          Fn::Sub: "${Project}-${Environment}-PublicSubnet1Id"
        - !ImportValue
          Fn::Sub: "${Project}-${Environment}-PublicSubnet2Id"
      SecurityGroups:
        - !Ref ALBSecurityGroup
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: "60"
      Tags:
        - Key: Project
          Value: !Ref Project
        - Key: Environment
          Value: !Ref Environment
        - Key: Owner
          Value: !Ref Owner

  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub "${Project}-${Environment}-TG"
      Protocol: HTTP
      Port: 5000
      VpcId: !ImportValue
        Fn::Sub: "${Project}-${Environment}-VPCId"
      TargetType: ip
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      Matcher:
        HttpCode: 200
      Tags:
        - Key: Project
          Value: !Ref Project
        - Key: Environment
          Value: !Ref Environment
        - Key: Owner
          Value: !Ref Owner

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup
      LoadBalancerArn: !Ref ALB
      Port: 80
      Protocol: HTTP

  ECSService:
    Type: AWS::ECS::Service
    DependsOn: ALBListener
    Properties:
      ServiceName: !Sub "${Project}-${Environment}-AppService"
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref TaskDefinition
      DesiredCount: 2
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets:
            - !ImportValue
              Fn::Sub: "${Project}-${Environment}-PrivateSubnet1Id"
            - !ImportValue
              Fn::Sub: "${Project}-${Environment}-PrivateSubnet2Id"
          SecurityGroups:
            - !Ref AppSecurityGroup
          AssignPublicIp: DISABLED
      LoadBalancers:
        - TargetGroupArn: !Ref ALBTargetGroup
          ContainerName: !Sub "${Project}-${Environment}-Container"
          ContainerPort: 5000
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      Tags:
        - Key: Project
          Value: !Ref Project
        - Key: Environment
          Value: !Ref Environment
        - Key: Owner
          Value: !Ref Owner

Outputs:
  ECSClusterName:
    Description: Name of the ECS Cluster
    Value: !Ref ECSCluster
    Export:
      Name: !Sub "${Project}-${Environment}-ECSClusterName"

  ECSServiceName:
    Description: Name of the ECS Service
    Value: !GetAtt ECSService.Name
    Export:
      Name: !Sub "${Project}-${Environment}-ECSServiceName"

  ALBDNSName:
    Description: DNS Name of the Application Load Balancer
    Value: !GetAtt ALB.DNSName
    Export:
      Name: !Sub "${Project}-${Environment}-ALBDNSName"

  ALBURL:
    Description: URL of the Application Load Balancer
    Value: !Sub "http://${ALB.DNSName}"
    Export:
      Name: !Sub "${Project}-${Environment}-ALBURL"

  AppTaskDefinitionArn:
    Description: ARN of the ECS Task Definition
    Value: !Ref TaskDefinition
    Export:
      Name: !Sub "${Project}-${Environment}-AppTaskDefinitionArn"
