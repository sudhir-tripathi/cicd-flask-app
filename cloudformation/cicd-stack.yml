AWSTemplateFormatVersion: '2010-09-09'
Description: "pipeline stack: creates codepipeline, codebuild, s3 artifact bucket, iam roles - mumbai region (ap-south-1)"

Parameters:
  project:
    Type: String
    Default: mane
    Description: The name of the project (e.g., mane)
  environment:
    Type: String
    Default: dev
    Description: The environment where resources will be deployed (e.g., dev, prod)
  owner:
    Type: String
    Default: sachin
    Description: The owner of the project
  githubowner:
    Type: String
    Description: GitHub username or organization name
  githubrepo:
    Type: String
    Description: GitHub repository name
  githubbranch:
    Type: String
    Default: main
    Description: GitHub branch to trigger the pipeline from
  githuboauthtoken:
    Type: String
    NoEcho: true
    Description: (Required) GitHub personal access token (repo or public_repo scope needed)
    # IMPORTANT: Store this securely (e.g., secrets manager) in production.

Resources:
  pipelineartifactsbucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      BucketName: !Sub "${project}-${environment}-pipeline-artifacts-${AWS::AccountId}-${AWS::Region}"
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LifecycleConfiguration:
        Rules:
          - Id: ExpireOldArtifacts
            Status: Enabled
            ExpirationInDays: 90
            NoncurrentVersionExpirationInDays: 30
      Tags:
        - Key: project
          Value: !Ref project
        - Key: environment
          Value: !Ref environment
        - Key: owner
          Value: !Ref owner

  codebuildrole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${project}-${environment}-codebuildrole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CodeBuildServicePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:PutObject
                Resource:
                  - !GetAtt pipelineartifactsbucket.Arn
                  - !Sub "${pipelineartifactsbucket.Arn}/*"
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${project}-${environment}-codebuildproject:*"
              - Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                  - ecr:BatchCheckLayerAvailability
                  - ecr:InitiateLayerUpload
                  - ecr:UploadLayerPart
                  - ecr:CompleteLayerUpload
                  - ecr:PutImage
                  - ecr:GetDownloadUrlForLayer
                Resource: "*"
      Tags:
        - Key: project
          Value: !Ref project
        - Key: environment
          Value: !Ref environment
        - Key: owner
          Value: !Ref owner

  codebuildproject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub "${project}-${environment}-buildproject"
      ServiceRole: !GetAtt codebuildrole.Arn
      Source:
        Type: CODEPIPELINE
        BuildSpec: buildspec.yml
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:7.0
        PrivilegedMode: true
        EnvironmentVariables:
          - Name: AWS_ACCOUNT_ID
            Value: !Ref AWS::AccountId
          - Name: AWS_REGION
            Value: !Ref AWS::Region
          - Name: ECR_REPOSITORY_NAME
            Value: !ImportValue
              Fn::Sub: "${project}-${environment}-ecr-repo-name"
          - Name: CONTAINER_NAME
            Value: flask-container
      Artifacts:
        Type: CODEPIPELINE
      LogsConfig:
        CloudWatchLogs:
          Status: ENABLED
      Tags:
        - Key: project
          Value: !Ref project
        - Key: environment
          Value: !Ref environment
        - Key: owner
          Value: !Ref owner

  piperoler:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${project}-${environment}-piperoler"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CodePipelineServicePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:PutObject
                Resource:
                  - !GetAtt pipelineartifactsbucket.Arn
                  - !Sub "${pipelineartifactsbucket.Arn}/*"
              - Effect: Allow
                Action:
                  - codebuild:BatchGetBuilds
                  - codebuild:StartBuild
                Resource: !GetAtt codebuildproject.Arn
              - Effect: Allow
                Action:
                  - ecs:DescribeServices
                  - ecs:UpdateService
                Resource: !Sub
                  - "arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:service/${ClusterName}/${ServiceName}"
                  - ClusterName: !ImportValue
                      Fn::Sub: "${project}-${environment}-ecs-cluster-name"
                    ServiceName: !ImportValue
                      Fn::Sub: "${project}-${environment}-ecs-service-name"
              - Effect: Allow
                Action:
                  - iam:PassRole
                Resource: "*"
      Tags:
        - Key: project
          Value: !Ref project
        - Key: environment
          Value: !Ref environment
        - Key: owner
          Value: !Ref owner

  codepipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: !Sub "${project}-${environment}-pipeline"
      RoleArn: !GetAtt piperoler.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref pipelineartifactsbucket
      Stages:
        - Name: Source
          Actions:
            - Name: GithubSource
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Provider: GitHub
                Version: 1
              OutputArtifacts:
                - Name: SourceOutput
              Configuration:
                Owner: !Ref githubowner
                Repo: !Ref githubrepo
                Branch: !Ref githubbranch
                OAuthToken: !Ref githuboauthtoken
                PollForSourceChanges: true
              RunOrder: 1
        - Name: Build
          Actions:
            - Name: CodeBuild
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              InputArtifacts:
                - Name: SourceOutput
              OutputArtifacts:
                - Name: BuildOutput
              Configuration:
                ProjectName: !Ref codebuildproject
              RunOrder: 1
        - Name: Deploy
          Actions:
            - Name: DeployToECS
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: ECS
                Version: 1
              InputArtifacts:
                - Name: BuildOutput
              Configuration:
                ClusterName: !ImportValue
                  Fn::Sub: "${project}-${environment}-ecs-cluster-name"
                ServiceName: !ImportValue
                  Fn::Sub: "${project}-${environment}-ecs-service-name"
                FileName: imagedefinitions.json
              RunOrder: 1
      Tags:
        - Key: project
          Value: !Ref project
        - Key: environment
          Value: !Ref environment
        - Key: owner
          Value: !Ref owner

Outputs:
  Pipelinename:
    Description: Name of the CodePipeline
    Value: !Ref codepipeline
    Export:
      Name: !Sub "${project}-${environment}-pipelinename"

  Pipelineartifactbucketname:
    Description: Name of the s3 bucket for pipeline artifacts
    Value: !Ref pipelineartifactsbucket
    Export:
      Name: !Sub "${project}-${environment}-pipelineartifactbucketname"
